apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.postgres.name }}-stateful-set
  labels:
    app: {{ .Values.postgres.name }}
spec:
  serviceName: {{ .Values.postgres.name }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.postgres.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.postgres.name }}
    spec:
      containers:
        - name: {{ .Values.postgres.name }}
          image: "{{ .Values.postgres.image.name }}:{{ .Values.postgres.image.tag }}"
          ports:
            - containerPort: {{ .Values.postgres.port }}
          env:
            - name: PGDATA
              value: {{ .Values.postgres.pgData }}
          envFrom:
            - secretRef:
                name: {{ .Values.postgres.name }}
          volumeMounts:
            - name: {{ .Values.postgres.name }}-data
              mountPath: /var/lib/postgresql/data
            - name: db-init
              mountPath: /docker-entrypoint-initdb.d
          resources:
            requests:
              memory: {{ .Values.postgres.resources.requests.memory }}
              cpu: {{ .Values.postgres.resources.requests.cpu }}
            limits:
              memory: {{ .Values.postgres.resources.limits.memory }}
              cpu: {{ .Values.postgres.resources.limits.cpu }}
      volumes:
        - name: db-init
          configMap:
            name: db-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.postgres.name }}-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.postgres.volume.capacity }}
        storageClassName: {{ .Values.postgres.storageClassName }}
